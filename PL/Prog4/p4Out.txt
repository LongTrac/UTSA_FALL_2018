[1]> (load "p4LispDef.lisp" :echo T :print T)
;; Loading file p4LispDef.lisp ...
;;; useful functions for LISP natural language parsing program

;;; Set up the parse-obj and word-dict
(setf parse-obj (MAKE-HASH-TABLE))
#S(HASH-TABLE :TEST FASTHASH-EQL)

(setf word-dict (MAKE-HASH-TABLE))
#S(HASH-TABLE :TEST FASTHASH-EQL)

(setf table-ht  (MAKE-HASH-TABLE))
#S(HASH-TABLE :TEST FASTHASH-EQL)



;;; processRequest
;;;    Parameters:
;;;       request - a list of words making a request
;;;    Purpose:
;;;       - Sets up necessary information (see below) and invokes the student's checkRequest
;;;         function.
;;;       - Since the student's checkRequest sets the parts of speech, processRequest prints
;;;         those parts of speeach.
;;;       - Returns T if the request is a valid request.  Otherwise, NIL is returned.
;;;    Notes:
;;;       - Sets the parse-obj hash table to contain the request
;;;       - Sets the cursor position to zero.
;;;       - Uses resetPartsOfSpeech to reset the values of each part of speech.
;;;       - Prints the request
;;;       - Invokes checkRequest to check for valid syntax and prints
;;;         the result.
;;;       - Prints the value for each part of speech
;;;       - Invokes makeDBRequest to generate a database request from the parts of speeach
;;;    Notes:
;;;       - Requests will not contain punctuation since
;;;             -- commas have a meaning in Common LISP associated with backquote
;;;             -- periods are used for dotted pairs
;;;

(defun processRequest(request)
    (PROG (result)
        ;;; Save the request in parse-obj.
        (putp 'request parse-obj request)
        ;;; Set the cursor position to 0.
        (putp 'cursor parse-obj 0)

        ;;; reset the parts of speech to NIL
        (resetPartsOfSpeech parse-obj 'verb 'directObj 'prep 'indirectObj 'QualIndirectPrep 'QualIndirectObj)
        (resetPartsOfSpeech parse-obj 'Comparator 'NotQual 'QualPrep 'QualValue)

        (format T "~% ******************************************************************")
        (format T "~%  ~a" request)
        (setf result (checkRequest parse-Obj))
        (format T "~%    checkRequest returned ~a" result)
        (format T "~%    verb= ~a" (getp 'verb parse-obj))
        (format T "~%    directObj= ~a" (getp 'directObj parse-obj))
        (format T "~%    prep= ~a" (getp 'prep parse-obj))
        (format T "~%    indirectObj= ~a" (getp 'indirectObj parse-obj))

        ;;; if we have a qual indirect, show it
        (cond ((or  (getp 'QualIndirectPrep parse-obj)
                    (getp 'QualIndirectObj parse-obj))
                (format T "~%    QualIndirectPrep= ~a" (getp 'QualIndirectPrep parse-obj))
                (format T "~%    QualIndirectObj= ~a" (getp 'QualIndirectObj parse-obj))
        ))
        ;;; if we have qual, show it
        (cond ((or  (getp 'Comparator parse-obj)
                    (getp 'NotQual parse-obj)
                    (getp 'QualPrep parse-obj)
                    (getp 'QualValue parse-obj))
                (if (getp 'NotQual parse-obj)
                     (format T "~%    NotQual = ~a" (getp 'NotQual parse-obj)))
                (format T "~%    Comparator= ~a" (getp 'Comparator parse-obj))
                (format T "~%    QualPrep= ~a" (getp 'QualPrep parse-obj))
                (format T "~%    QualValue= ~a" (getp 'QualValue parse-obj))
        ))
        (if (not result) (return result))

        ;;; see if doing extra credit, return if not
        (if (NOT doingExtra)
            (return result))

        ;;; generate the SQL and show that SQL query
        (setf query (genSQL parse-Obj))
        (format T "~%    DBRequest= ~a" query)

        (return result) ) )
PROCESSREQUEST


;;; putp
;;;    Parameters:
;;;       symbol   - symbol to be given the property value
;;;       ht       - hash table to store the symbol and its property value
;;;       value    - the property value
;;;    Purpose:
;;;       stores the property value for the symbol in the specified hash table
;;;    Notes:
;;;       If the symbol isn't an ATOM, putp breaks execution with an ERROR.
;;;    Example Usage:
;;;       (putp 'prep parse preposition)
;;;       (putp word word-dict partOfSpeech)

(defun putp (symbol ht value)
    (if (ATOM symbol)
        (setf (gethash symbol ht) value)
        (ERROR "~s is not a valid symbol for putp" symbol)
    )
)
PUTP


;;; getp
;;;    Parameters:
;;;       symbol   - symbol about which we want its property value
;;;       ht       - hash table which stores the symbol and its property value
;;;    Purpose:
;;;       Returns the property value for the symbol in the specified hash table
;;;       If not found, it returns NIL.
;;;    Example Usage:
;;;       (getp word word-dict)  would return the partOfSpeech for that word
;;;       (getp 'request parse-obj)  would return the original request from the parse-obj.
(defun getp (symbol ht)
     (gethash symbol ht) )
GETP


;;; getCursor
;;;    Parameters:
;;;       parse - the parse object containing a request, cursor position, and
;;;               value for each part of speech
;;;    Purpose:
;;;       returns the current cursor position (relative to zero)
(defun getCursor (parse)
    (getp 'cursor parse) )
GETCURSOR


;;; setCursor
;;;    Parameters:
;;;       parse - the parse object containing a request, cursor position, and
;;;               value for each part of speech
;;;       cursorPosition - new cursor position
;;;    Purpose:
;;;       Sets the value of the cursor position (relative to zero) in the
;;;       parse object
;;;    Notes:
;;;       If the cursorPosition isn't a numeric, setCursor breaks execution
;;;       with an ERROR.
(defun setCursor (parse cursorPosition)
    (if (numberp cursorPosition)
        (putp 'cursor parse cursorPosition)
        (ERROR "~s is not a numeric argument for setCursor" cursorPosition)
    )
)
SETCURSOR


;;; getToken
;;;    Parameters:
;;;       parse - the parse object containing a request, cursor position, and
;;;               value for each part of speech
;;;    Purpose:
;;;       returns the next token from the request.  If there are no more
;;;       tokens, it returns NIL.
;;;    Notes:
;;;       This modifies the cursor position after getting the current token
;;;       at the old position.

(defun getToken (parse)
    (prog (temp)
        (setf temp (nth (getp  'cursor parse) (getp  'request parse)))
        (setCursor parse (1+ (getp 'cursor parse)))
        (return temp) ) )
GETTOKEN




 ;;; defaulting doingExtra to NIL
 (setf doingExtra NIL)
NIL





;; Loaded file p4LispDef.lisp
T
[2]> (load "p4Lisp.txt" :echo T :print T)
;; Loading file p4Lisp.txt ...

;;; set_isa
;;;    Parameters:
;;;       pOS           - part of speech
;;;       word_list     - the list of word that passed in to identify as a "part of speech"
;;;
;;;    Purpose:
;;;       The macro will store the word as a part of speech in the hashtable
;;;       for later determination of what part of speech the word is when parsing
;;;       the request statement
;;;
;;;     Return:
;;;       when finish processing the list of word the macro will return T to indicate the task is done
;;;
;;;     Expansion Example:
;;;       Example: (set_isa article a an the)
;;;       Expansion:    T ;
;;;                     T
(defmacro set_isa (pOS &rest word_list)
    (do ( (word word_list (CDR word)) )
        ( (NULL word) T )
        ( putp (CAR word) word-dict pOS )
    )
)
SET_ISA


;;; isa
;;;    Parameters:
;;;       word          - the word that need to be determine if it is a specific pOS
;;;       pOS           - part of speech in English
;;;
;;;    Purpose:
;;;       The function will determine if the passed in word is the same pOS we are looking for
;;;
;;;     Return:
;;;       T if the word is the same POS we are looking for
;;;       NIL if it is not
;;;
(defun isa (word pOS)
    ( EQL pOS (getp word word-dict) )

)
ISA


;;; resetPartsOfSpeech
;;;    Parameters:
;;;       parse         - the parse-obj hash table
;;;       pOS           - all part of speeches of a request
;;;
;;;    Purpose:
;;;       The function will reset the parse-obj hash table for each time we have a new request
;;;
;;;     Return:
;;;       NIL if we are done resetting the hash table
;;;
(defun resetPartsOfSpeech (parse &rest pOS )
    (do ( (speechPart pOS (CDR speechPart)) )
        ( (NULL speechPart ) NIL )
        ( putp (CAR speechPart) parse NIL )
    )
)
RESETPARTSOFSPEECH


;;; resetPartsOfSpeech
;;;    Parameters:
;;;       parse         - The complete request that needed to be parse
;;;
;;;    Purpose:
;;;       The function will check each word from a request to make sure it is a valid request
;;;       depending on one of the two type we have
;;;
;;;     Return:
;;;       T if it is a valid request
;;;       NIL if invalid
;;;
(defun checkRequest (parse)
    (PROG ()
        ;verb
        (setf token (getToken parse) )
        (if (not (isa token 'verb)) (return NIL) )
        (putp 'verb parse-obj token )

        ;article or directObj (noun)
        (setf token (getToken parse) )
        (if (isa token 'article)
            (setf token (getToken parse)) )
        (if (not (isa token 'noun)) (return NIL) )
        (putp 'directObj parse-obj token )

        ;prep
        (setf token (getToken parse) )
        (if (not (isa token 'prep)) (return NIL) )
        (putp 'prep parse-obj token )

        ;article or indirectObj (noun)
        (setf token (getToken parse) )
        (if (isa token 'article)
            (setf token (getToken parse)) )
        (if (not (isa token 'noun)) (return NIL) )
        (putp 'indirectObj parse-obj token )

        ;qualIndirectPrep
        ;if the program can reach this point, for type 1 request it is done
        (setf token (getToken parse) )
        (if (EQL token NIL) (return T) )
        (if (not (isa token 'prep)) (return NIL) )
        (putp 'QualIndirectPrep parse-obj token )

        ;article or qualIndirectObj (noun)
        (setf token (getToken parse) )
        (if (isa token 'article)
            (setf token (getToken parse)) )
        (if (not (isa token 'noun)) (return NIL) )
        (putp 'QualIndirectObj parse-obj token )

        ;optional NOT
        (setf token (getToken parse) )
        (if (EQL token 'not)
            (putp 'NotQual parse-obj token) )
        (if (EQL token 'not)
            (setf token (getToken parse)) )

        ;Comparator

        (if (not (isa token 'comparator)) (return NIL) )
        (putp 'comparator parse-obj token )

        ;QualPrep
        (setf token (getToken parse) )
        (if (isa token 'prep)
            (putp 'QualPrep parse-obj token) )
        (if (isa token 'prep)
            (setf token (getToken parse) ) )

        ;QualValue
        (putp 'QualValue parse-obj token )

        (return T)
    )
)
CHECKREQUEST
;; Loaded file p4Lisp.txt
T
[3]> (load "p4LispRun.txt" :echo T :print T)
;; Loading file p4LispRun.txt ...
;;; p4LispRun.txt - run the student's code
;;; Use set_isa to set the part of speech for each of the words.
(set_isa article a an the)
T

(set_isa noun movies movie rentals rental customer customers)
T

(set_isa noun ID title genre rating custNr name state date number gender)
T

(set_isa verb count select show print)
T

(set_isa prep of with to in for)
T

(set_isa comparator equal after before)
T

(set_isa adjective horror scifi romance comedy action male female g pg pg13 r x )
T


(putp 'movie table-ht 'movie)
MOVIE

(putp 'movies table-ht 'movie)
MOVIE

(putp 'rental table-ht 'rental)
RENTAL

(putp 'rentals table-ht 'rental)
RENTAL

(putp 'customer table-ht 'customer)
CUSTOMER

(putp 'customers table-ht 'customer)
CUSTOMER


 ;;;
 ;;; first form:  verb [article] directObj prep [article] indirectObj
 ;;;
 (processRequest '(count the number of rentals ))
 ******************************************************************
  (COUNT THE NUMBER OF RENTALS)
    checkRequest returned T
    verb= COUNT
    directObj= NUMBER
    prep= OF
    indirectObj= RENTALS
T


 (processRequest '(count the number of movies ))
 ******************************************************************
  (COUNT THE NUMBER OF MOVIES)
    checkRequest returned T
    verb= COUNT
    directObj= NUMBER
    prep= OF
    indirectObj= MOVIES
T


 (processRequest '(show ID for movies ))
 ******************************************************************
  (SHOW ID FOR MOVIES)
    checkRequest returned T
    verb= SHOW
    directObj= ID
    prep= FOR
    indirectObj= MOVIES
T


 ;;;
 ;;; second form: verb [article] directObj prep [article] indirectObj
 ;;;                   prep [article] qualIndirectObj comparator [prep] qualValue
 ;;;
 (processRequest '(show the title of movies with rating equal to PG13))
 ******************************************************************
  (SHOW THE TITLE OF MOVIES WITH RATING EQUAL TO PG13)
    checkRequest returned T
    verb= SHOW
    directObj= TITLE
    prep= OF
    indirectObj= MOVIES
    QualIndirectPrep= WITH
    QualIndirectObj= RATING
    Comparator= EQUAL
    QualPrep= TO
    QualValue= PG13
T


 (processRequest '(Count the number of rentals with date after 2018-10-01))
 ******************************************************************
  (COUNT THE NUMBER OF RENTALS WITH DATE AFTER 2018-10-01)
    checkRequest returned T
    verb= COUNT
    directObj= NUMBER
    prep= OF
    indirectObj= RENTALS
    QualIndirectPrep= WITH
    QualIndirectObj= DATE
    Comparator= AFTER
    QualPrep= NIL
    QualValue= 2018-10-01
T


 (processRequest '(Show the title for the movie with ID equal to HP001))
 ******************************************************************
  (SHOW THE TITLE FOR THE MOVIE WITH ID EQUAL TO HP001)
    checkRequest returned T
    verb= SHOW
    directObj= TITLE
    prep= FOR
    indirectObj= MOVIE
    QualIndirectPrep= WITH
    QualIndirectObj= ID
    Comparator= EQUAL
    QualPrep= TO
    QualValue= HP001
T


 (processRequest '(Select the name of the customer with custNr equal to 111))
 ******************************************************************
  (SELECT THE NAME OF THE CUSTOMER WITH CUSTNR EQUAL TO 111)
    checkRequest returned T
    verb= SELECT
    directObj= NAME
    prep= OF
    indirectObj= CUSTOMER
    QualIndirectPrep= WITH
    QualIndirectObj= CUSTNR
    Comparator= EQUAL
    QualPrep= TO
    QualValue= 111
T


 ;;;
 ;;;  Examples with NOT
 ;;;
 (processRequest '(Show title for movies with rating not equal to G))
 ******************************************************************
  (SHOW TITLE FOR MOVIES WITH RATING NOT EQUAL TO G)
    checkRequest returned T
    verb= SHOW
    directObj= TITLE
    prep= FOR
    indirectObj= MOVIES
    QualIndirectPrep= WITH
    QualIndirectObj= RATING
    NotQual = NOT
    Comparator= EQUAL
    QualPrep= TO
    QualValue= G
T


 ;;;
 ;;; Some invalid requests
 ;;;
 (processRequest '(Show title for videos with a rating of G))
 ******************************************************************
  (SHOW TITLE FOR VIDEOS WITH A RATING OF G)
    checkRequest returned NIL
    verb= SHOW
    directObj= TITLE
    prep= FOR
    indirectObj= NIL
NIL

 (processRequest '(Show title for movies having a rating of G))
 ******************************************************************
  (SHOW TITLE FOR MOVIES HAVING A RATING OF G)
    checkRequest returned NIL
    verb= SHOW
    directObj= TITLE
    prep= FOR
    indirectObj= MOVIES
NIL

 (processRequest '(Show title for movies with a rating of G or PG))
 ******************************************************************
  (SHOW TITLE FOR MOVIES WITH A RATING OF G OR PG)
    checkRequest returned NIL
    verb= SHOW
    directObj= TITLE
    prep= FOR
    indirectObj= MOVIES
    QualIndirectPrep= WITH
    QualIndirectObj= RATING
NIL


 ;;; see if doing extra credit, return if not
 (if (NOT(EQL doingExtra 'EC2))
    (abort))
[4]>

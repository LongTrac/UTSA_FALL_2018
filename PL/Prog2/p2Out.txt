[1]> (load "p2Lisp.txt" :echo T :print T)
;; Loading file p2Lisp.txt ...
;;; removeNILTop
;;;    Parameters:
;;;       L - a list of items that can contains embeded list
;;;    Purpose:
;;;       Returns a list that is completely free of NIL
;;;               on the top level only - if the list has embeded list,
;;;               everthing else stays the same

(defun removeNILTop (L)
        ( COND  ( (NULL L)      NIL )
                        ( (NULL (CAR L))        (removeNILTop(CDR L) ) )
                        ( T (CONS (CAR L)       (removeNILTop(CDR L)) ) )
        )
)
REMOVENILTOP


;;; removeNILMost
;;;    Parameters:
;;;       L - a list of items that can contain embeded list
;;;    Purpose:
;;;       Returns a list that has NIL at any level removed
;;;        Note:
;;;               If the result of removing NIL gives a NIL,
;;;       it is unnecessary to remove that resulting NIL.

(defun removeNILMost (L)
        ( COND  ( (NULL  L)     NIL )
                        ( (NULL (CAR L)) (removeNILMost (CDR L) ) )
                        ( (ATOM (CAR L)) (CONS (CAR L) (removeNILMost (CDR L)) ) )
                        ( T  (CONS (removeNILMost (CAR L)) (removeNILMost (CDR L)) ) )
        )
)
REMOVENILMOST


;;; reverseTop
;;;    Parameters:
;;;       L - a list of items that can contain embeded list
;;;    Purpose:
;;;       Returns a list that has the top level elements reversed

(defun  reverseTop (L)
        ( COND  ( (NULL L) NIL )
                        ( T (APPEND  (reverseTop (CDR L)) (LIST (CAR L)) ) )
        )
)
REVERSETOP


;;; reverseAll
;;;    Parameters:
;;;       L - a list of items that can contain embeded list
;;;    Purpose:
;;;       Returns a list that is reversed at all levels
;;;        Note:
;;;               This function will reverse embeded lists first before
;;;       reverse the outer levels

(defun reverseAll (L)
        ( COND  ( (NULL L) NIL )
                        ( (ATOM (CAR L)) (APPEND (reverseAll(CDR L))(LIST (CAR L)) ) )
                        ( T (APPEND (reverseAll(CDR L))(LIST(reverseAll(CAR L))) ) )
        )

)
REVERSEALL


;;; palindrome
;;;    Parameters:
;;;       L - a list of items that may or maynot have embeded lists
;;;    Purpose:
;;;       Returns T if the list is actually a palindrome
;;;       Returns NIL otherwise.
;;;    Note:
;;;               Only need to work with the top level list

(defun palindrome (L)
        ( COND  ( (EQUAL L (reverseTop L )) T )
                        ( T NIL )
        )
)
PALINDROME


;;; removeNILAll
;;;    Parameters:
;;;       L - a list of items that can contain embeded list
;;;    Purpose:
;;;       Returns a list that has NIL at any level removed
;;;        Note:
;;;               Unlike removeNilMost, This one actually remove all the NIL
;;;       including the result of removing NIL gives a NIL.

(defun removeNILAll (L)
        ( COND  ( (NULL  L ) NIL )
                        ( (NULL (CAR L) ) (removeNILAll (CDR L)) )
                        ( (ATOM (CAR L) ) (CONS (CAR L) (removeNILAll (CDR L)) ))
                        ( (NULL (CDR L) ) (removeNILAll (CAR L)) )
                        ( (AND (NULL (CAAR L)) (NULL (CADR L)) ) (removeNILAll (CDR l)) )
                        ( (OR (NULL (CAAR L)) (NULL (CADR L)) ) (removeNILAll (CDR l)) )
                        ( (NULL (CDAR L) ) (APPEND (removeNILAll (CAR L))(removeNILAll (CDR L)) ) )
                        ( T  (CONS (removeNILAll (CAR L)) (removeNILAll (CDR L)) ) )
        )
)
REMOVENILALL
;; Loaded file p2Lisp.txt
T
[2]> (load "p2LispRun.txt" :echo T :print T)
;; Loading file p2LispRun.txt ...
;;; LISP Program #2 p2LispRun.txt

;;;  #1 removeNILTop

(removeNILTop '(NIL X NIL NIL Y  NIL Z))
(X Y Z)

(removeNILTop '(X NIL Y NIL Z NIL))
(X Y Z)

(removeNILTop '(NIL (X NIL Y) (NIL NIL)))
((X NIL Y) (NIL NIL))


;;; #2 removeNILMost

(removeNILMost '(NIL X NIL NIL Y  NIL Z))
(X Y Z)

(removeNILMost '(X NIL (Y NIL Z) NIL))
(X (Y Z))

(removeNILMost '(NIL (NIL) (X NIL Y) (NIL NIL) Z))
(NIL (X Y) NIL Z)

(removeNILMost '(NIL ( (((((NIL) NIL)))))))
((((((NIL))))))


;;; #3 reverseTop

(reverseTop '(X Y Z))
(Z Y X)

(reverseTop '(X (Y Z (A)) (W)))
((W) (Y Z (A)) X)


;;; #4 reverseALL

(reverseAll '(X Y Z))
(Z Y X)

(reverseAll '(X (Y Z (A)) (W)))
((W) ((A) Z Y) X)


;;; #5 palindrome

(palindrome '(R A C E C A R))
T

(palindrome '(W A S I T A C A R O R A C A T I S A W))
T

(palindrome '(N I X O N))
NIL



;; Loaded file p2LispRun.txt
T
[3]> (load "p2LispExtraRun.txt" :echo T :print T)
;; Loading file p2LispExtraRun.txt ...
;;; LISP Program #2 p2LispExtraRun.txt

(removeNILAll '(NIL (NIL) (X NIL Y) (NIL NIL) Z))
((X Y) Z)

(removeNILAll '(NIL ( (((((NIL) NIL)))))))
NIL

(removeNILAll '(NIL (X (NIL) Y) ((NIL)) ))
((X Y))

(removeNILAll '(NIL (((X ((((((((((NIL)))))))))) Y) Z) W) (((NIL))) ))
((((X Y) Z) W))
;; Loaded file p2LispExtraRun.txt
T
